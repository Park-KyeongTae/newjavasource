package inheritance;
//	@Override : 단순 주석 아니고, 오버라이드 된거라고 시스템에 확실히 알림
// 수행 내용 하나라도 달라야 Override 하는 의미가 있음
// 오버라이드는 메서드 이름과 매개변수를 동일하게 가져가야하는데,
// 어노테이션 없이 다르면 그냥 돌아버린다.
// 어노테이션이 있고 다르면 컴파일 에러를 출력, 잘못되었다는 사실을 알 수 있다.

/* 하나의 클래스에 동일한 이름의 메소드나 생성자를 작성
 *  메소드 오버로딩, 생성자 오버로딩
 *  
 *  오버라이딩 : 상속
 *  부모가 가지고 있는 메소드와 동일한 시그니처를 가진 메소드를 자식도 가지고 있을 때
 *  시그니처 : 리턴타입, 메소드명, 매개변수 등
 *  부모가 제공하는 기능 + 확장의 개념이 있을 때
 *  혹은 기능을 덮어쓰기 할 때
 */

/* 클래스 관계
 * 상속 관계(is-a) Circle is a Point
 *  - 단일 상속. extends 다음에는 하나의 클래스만 올 수 있다
 * 포함 관계(has-a) Circle has a Point
 *  - 여러개 들어와도 전혀 상관없다.
 * 
 * 포함관계
 * 한 클래스의 멤버변수로 다른 클래스 타입의 참조변수를 선언
 * 
 * Ex)
 * Car class
 * Engine class - has a 포함관계로 만든다
 * Door class - has a 포함관계로 만든다
 * 
 * Account 
 * BonusPointAccount 보너스 포인트 계좌는 계좌이다 - 상속 관계
 */

/* package - 패키지명은 소문자로 시작한다
 * class(인터페이스)의 묶음
 * ==> 폴더
 * 클래스 이름 - 패키지명.클래스명
 * Ex)
 * ch6.Account
 * exam.Account
 * inheritance.Account
 * java.lang.String -> package 계층. java 패키지 안의 lang 패키지
 */

/* 상속
 * 기존의 클래스를 재사용하여 새로운 클래스를 작성
 * 상속의 장점
 *  1) 적은 양의 코드로 새로운 클래스를 작성할 수 있음
 *  2) 코드를 공통적으로 관리하기 때문에 추가 및 변경이 용이함
 *  
 *  extends : 상속 키워드
 *  
 *  상속 가능 대상
 *   1) 자손 클래스는 조상 클래스의 모든 멤버를 상속받음(단, 생성자와 초기화블럭은 상속 안됨)
 *   2) 자손 클래스의 멤버 개수는 조상 클래스보다 항상 같거나 많음 [자손 클래스의 멤버 개수 = 상속 멤버 + 자손 선언 멤버
 *   
 *   '단일' 상속
 */


//this - 자기 자신 클래스를 지칭
//this() : 생성자에서 다른 생성자를 호출 시 
//this.변수명 : 매개 변수와 생성자용 인스턴스변수 이름이 같을 때 구별 용도

//super - 부모 클래스를 지칭
//super() : 생성자에서 부모 생성자를 호출 시
//super.변수명 : 부모가 가지고 있는 인스턴스 변수를 사용할 때

//클래스 작성시 부모를 지정하지 않으면 Object 라는 클래스가 최상위로 지정됨

//public Tv2() {
//super(); //부모의 기본 생성자 호출. 
//기본생성자는 막을 수 있어도, super는 지워도 주석처리해도 무조건 돈다
//}

public class A_Note {

}
